{% extends 'base.html.twig' %}

{% block title %}{{ champion_ship.name }} - RobotCup{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .championship-container {
            width: 100%;    
            max-width: 1200px;
            padding: 2rem;
            color: rgba(243, 244, 246, 1);
            position: relative;
            z-index: 20;
            margin-top:50px;
        }
        .match-card{
            height: 300px;
        }

        .championship-header {
            background: rgba(17, 24, 39, 0.2);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 2rem;
        }

        .championship-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #60a5fa, #38bdf8);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
        }

        .championship-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .info-card {
            background: rgba(17, 24, 39, 0.3);
            padding: 1rem;
            border-radius: 0.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .info-label {
            font-size: 0.875rem;
            color: #94a3b8;
            margin-bottom: 0.25rem;
        }

        .info-value {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .matches-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .match-card {
            background: rgba(17, 24, 39, 0.2);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
        }

        .match-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .match-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .match-date {
            font-size: 0.875rem;
            color: #94a3b8;
        }

        .match-status {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-scheduled {
            background: rgba(59, 130, 246, 0.2);
            color: #60a5fa;
        }

        .status-finished {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .match-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin: 1.5rem 0;
            padding: 1rem;
            background: rgba(17, 24, 39, 0.3);
            border-radius: 0.75rem;
            min-height: 100px; 
        }

        .team {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.5rem;
            max-width: 40%; /* Empêche d'occuper trop d'espace */
        }

        .team-name {
            font-size: 0.95rem;
            font-weight: 600;
            color: #e5e7eb;
            text-align: center;
            word-wrap: break-word; /* Permet le retour à la ligne */
            width: 100%; /* Force l'utilisation de toute la largeur disponible */
            margin-bottom: 0.75rem;
            line-height: 1.2; /* Meilleur espacement entre les lignes */
        }
        .championship-name {
            font-size: 1.25rem;  /* Réduit de 1.5rem à 1.25rem */
            font-weight: 700;
            margin-bottom: 0.75rem;  /* Réduit de 1rem à 0.75rem */
            background: linear-gradient(45deg, #60a5fa, #38bdf8);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .btn-sm {
            padding: 0.375rem 0.75rem;  /* Réduit de 0.5rem 1rem à 0.375rem 0.75rem */
            font-size: 0.875rem;
        }
        .team-score {
            font-size: 2rem;
            font-weight: 700;
            line-height: 1;
            margin-top: auto; /* Pousse le score vers le bas */
        }

        .vs {
            padding: 0 1.5rem;
            font-weight: 600;
            color: #94a3b8;
            font-size: 1rem;
            opacity: 0.7;
            flex-shrink: 0; /* Empêche le "VS" de se rétrécir */
        }

        .blue-score {
            color: #60a5fa;
            text-shadow: 0 0 15px rgba(96, 165, 250, 0.3);
        }

        .green-score {
            color: #34d399;
            text-shadow: 0 0 15px rgba(52, 211, 153, 0.3);
        }

        .open-modal-btn {
            width: 100%;
            background: linear-gradient(45deg, #3b82f6, #2563eb);
            color: white;
            padding: 0.75rem;
            border-radius: 0.5rem;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: auto;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .open-modal-btn:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8);
            transform: translateY(-1px);
        }

        .open-modal-btn i {
            font-size: 1rem;
        }

        .no-matches {
            grid-column: 1 / -1;
            text-align: center;
            padding: 3rem;
            background: rgba(17, 24, 39, 0.2);
            border-radius: 1rem;
            color: #94a3b8;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
        }

        @media (max-width: 768px) {
            .championship-container {
                padding: 1rem;
            }

            .matches-grid {
                grid-template-columns: 1fr;
            }

            .championship-info {
                grid-template-columns: 1fr;
            }
        }
        .championship-container {
            width: 100%;    
            max-width: 1200px;
            margin: 1.5rem auto;  /* Réduit de 2rem à 1.5rem */
            padding: 1.5rem;     /* Réduit de 2rem à 1.5rem */
            color: rgba(243, 244, 246, 1);
            position: relative;
            z-index: 20;
        }
        .championships-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));  /* Réduit de 300px à 250px */
            gap: 1rem;       /* Réduit de 2rem à 1rem */
            margin-top: 1rem;  /* Réduit de 2rem à 1rem */
        }
        .back-button-container {
            position: absolute;
            top: 1rem;
            left: 2rem;
            z-index: 30;
        }

        .championship-header {
            text-align: center;
        }
        .championship-card {
            background: rgba(17, 24, 39, 0.2);
            backdrop-filter: blur(10px);
            border-radius: 0.75rem;  /* Réduit de 1rem à 0.75rem */
            padding: 1.25rem;       /* Réduit de 1.5rem à 1.25rem */
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.3s ease;
        }
        .championship-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #60a5fa, #38bdf8);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .championship-dates {
            color: #94a3b8;
            font-size: 1.1rem;
        }
        .btn {
            background: linear-gradient(45deg, #3b82f6, #0ea5e9);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 0 25px rgba(59, 130, 246, 0.5);
        }

        .btn-danger {
            background: linear-gradient(45deg, #ef4444, #dc2626);
        }

        .btn-edit {
            background: linear-gradient(45deg, #10b981, #059669);
        }

        .btn-back {
            background: linear-gradient(45deg, #6b7280, #4b5563);
        }

        .matches-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .match-card {
            background: rgba(17, 24, 39, 0.2);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.25rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.3s ease;
            min-width: 0;
        }

        .match-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .team-vs {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 1rem 0;
        }

        .team {
            flex: 1;
            text-align: center;
            padding: 0.75rem;
        }

        .team-blue {
            color: #60a5fa;
        }

        .team-green {
            color: #34d399;
        }

        .team-name {
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .team-score {
            font-size: 1.5rem;
            font-weight: 700;
        }

        .vs-divider {
            font-size: 1.2rem;
            color: #94a3b8;
            padding: 0 0.75rem;
        }

        .match-info {
            text-align: center;
            color: #94a3b8;
            font-size: 0.9rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .match-status {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .status-scheduled {
            background: rgba(59, 130, 246, 0.1);
            color: #60a5fa;
        }

        .status-in-progress {
            background: rgba(245, 158, 11, 0.1);
            color: #fbbf24;
        }

        .status-completed {
            background: rgba(16, 185, 129, 0.1);
            color: #34d399;
        }

        .no-matches {
            text-align: center;
            padding: 2rem;
            background: rgba(17, 24, 39, 0.2);
            border-radius: 1rem;
            color: #94a3b8;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            grid-column: 1 / -1;
        }

        .header-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }
        .championship-header-actions {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 1.5rem;  /* Réduit de 2rem à 1.5rem */
            gap: 0.75rem;          /* Réduit de 1rem à 0.75rem */
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
        }

        .pagination {
            display: flex;
            list-style: none;
            padding-top:5px;
            margin: 0;

        }

        .pagination a {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 2.5rem;
            height: 2.5rem;
            border-radius: 0.5rem;
            background: rgba(17, 24, 39, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #94a3b8;
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .pagination span {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 2.5rem;
            height: 2.5rem;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            color: white;
            font-size: 0.9rem;
        }

        .pagination a:hover {
            background: rgba(59, 130, 246, 0.2);
            color: #60a5fa;
            transform: translateY(-2px);
        }

        .pagination span.current {
            background: linear-gradient(45deg, #3b82f6, #0ea5e9);
            color: white;
            border: none;
        }

        @media (max-width: 1200px) {
            .matches-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .back-button-container {
                position: static;
                margin-bottom: 1rem;
            }
        }

        @media (max-width: 768px) {
            .championship-container {
                padding: 1rem;
            }

            .matches-grid {
                grid-template-columns: 1fr;
            }

            .header-actions {
                flex-direction: column;
                align-items: stretch;
            }

            .championship-title {
                font-size: 2rem;
            }

            .back-button-container {
                position: static;
                margin-bottom: 1rem;
            }

        }
        .modal-backdrop {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }

        .modal-container {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(145deg, rgba(31, 41, 55, 0.95), rgba(17, 24, 39, 0.95));
            border-radius: 1rem;
            padding: 2rem;
            min-width: 320px;
            max-width: 90%;
            z-index: 1001;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            animation: slideIn 0.3s ease;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: white;
            background: linear-gradient(45deg, #60a5fa, #38bdf8);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .modal-close {
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            font-size: 1.5rem;
            padding: 0.5rem;
            transition: color 0.3s ease;
        }

        .modal-close:hover {
            color: white;
        }

        .modal-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .score-group {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .score-input-container {
            flex: 1;
            position: relative;
        }

        .score-input-label {
            display: block;
            font-size: 0.875rem;
            color: #94a3b8;
            margin-bottom: 0.5rem;
        }

        .score-input {
            width: 100%;
            background: rgba(17, 24, 39, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.75rem;
            border-radius: 0.5rem;
            color: white;
            font-size: 1.125rem;
            transition: all 0.3s ease;
        }

        .score-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
        }

        .score-submit {
            background: linear-gradient(45deg, #3b82f6, #2563eb);
            color: white;
            padding: 1rem;
            border-radius: 0.5rem;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .score-submit:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8);
            transform: translateY(-1px);
        }

        .scores-separator {
            color: #94a3b8;
            font-weight: 600;
            font-size: 1.25rem;
        }

        .score-error {
            color: #ef4444;
            background: rgba(239, 68, 68, 0.1);
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translate(-50%, -60%);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }
            .championship-header-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .btn-info {
        background: linear-gradient(45deg, #0ea5e9, #3b82f6);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-info:hover {
        transform: translateY(-2px);
        box-shadow: 0 0 25px rgba(59, 130, 246, 0.5);
    }

    .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

    .loading-spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 10px;
    }

    .loading-message {
        color: white;
        font-size: 1.1em;
    }

    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 4px;
        color: white;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        z-index: 1001;
    }

    .toast.show {
        opacity: 1;
    }

    .toast-success {
        background-color: #28a745;
    }

    .toast-error {
        background-color: #dc3545;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
.matches-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* 3 colonnes */
        gap: 1.5rem;
        margin-bottom: 2rem; /* Ajouter de l'espace pour la pagination */
    }

    .pagination {
        display: flex;
        justify-content: center;
        gap: 0.3rem;  /* Réduit de 1rem à 0.3rem */
        margin-top: 2rem;
        padding: 1rem;
    }

    .pagination span, .pagination a {
        padding: 0.5rem 0.75rem;  /* Réduit le padding horizontal de 1rem à 0.75rem */
        border-radius: 0.4rem;   /* Légèrement réduit pour correspondre au style plus compact */
        background: rgba(17, 24, 39, 0.2);
        color: white;
        text-decoration: none;
        transition: all 0.3s ease;
        min-width: 2.5rem;      /* Assure une largeur minimale uniforme */
        text-align: center;     /* Centre le texte */
        display: flex;          /* Pour un meilleur centrage */
        align-items: center;    /* Pour un meilleur centrage */
        justify-content: center; /* Pour un meilleur centrage */
    }

    .pagination span.current {
        background: linear-gradient(45deg, #3b82f6, #0ea5e9);
    }

    .pagination a:hover {
        background: rgba(59, 130, 246, 0.2);
        transform: translateY(-2px);
    }

    @media (max-width: 1024px) {
        .matches-grid {
            grid-template-columns: repeat(2, 1fr); /* 2 colonnes sur tablette */
        }
    }

    @media (max-width: 768px) {
        .matches-grid {
            grid-template-columns: 1fr; /* 1 colonne sur mobile */
        }
    }

    </style>
{% endblock %}
{% block body %}
    {{ parent() }}
    {% for message in app.flashes('success') %}
        <div class="alert alert-success">
            {{ message }}
        </div>
    {% endfor %}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}
    <div class="championship-container">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <button onclick="window.history.back()" class="btn btn-back">
                <i class="fas fa-arrow-left"></i> {{ "Back" |trans }}
            </button>
            <div>
                <button onclick="exportMeetings()" class="btn btn-info">
                    <i class="fas fa-file-export"></i> {{ "Export_ChampionShip" |trans }}
                </button>
                <button type="button" class="btn btn-success" onclick="document.getElementById('importFile').click()">
                    <i class="fas fa-file-import"></i> {{ "Import_ChampionShip" |trans }}
                </button>
                <input type="file" id="importFile" accept=".json" style="display: none" onchange="importChampionship(this)">
            </div>
            <div class="championship-name">
                <strong>{{ champion_ship.name }}</strong>
            </div>
        </div>

        <div class="matches-grid">
            {% if meetings|length > 0 %}
                {% for meeting in meetings %}
                    <div class="match-card" id="match-card-{{ meeting.id }}">
                        <div class="match-header">
                            <div class="match-date">
                                {% if meeting.timeSlot %}
                                    {{ meeting.timeSlot.start|date('H:i') }}
                                {% else %}
                                    --:--
                                {% endif %}
                            </div>
                            <div class="match-status {{ meeting.state == 'PLAYED' ? 'status-finished' : 'status-scheduled' }}">
                                {{ meeting.state }}
                            </div>
                        </div>

                        <div class="match-content">
                            <div class="team">
                                <div class="team-name">{{ meeting.blueTeam.name }}</div>
                                {% if meeting.state == 'PLAYED' or meeting.state == 'GAVE_UP_GREEN' or meeting.state == 'GAVE_UP_BLUE' %}
                                    <div class="team-score blue-score">{{ meeting.blueScore }}</div>
                                {% endif %}
                            </div>
                            
                            <div class="vs">VS</div>
                            
                            <div class="team">
                                <div class="team-name">{{ meeting.greenTeam.name }}</div>
                                {% if meeting.state == 'PLAYED' or meeting.state == 'GAVE_UP_GREEN' or meeting.state == 'GAVE_UP_BLUE' %}
                                    <div class="team-score green-score">{{ meeting.greenScore }}</div>
                                {% endif %}
                            </div>
                        </div>

                        {% if meeting.state != 'PLAYED' and meeting.state != 'GAVE_UP_GREEN' and meeting.state != 'GAVE_UP_BLUE' and (is_granted('ROLE_ADMIN') or is_granted('ROLE_ORGA')) %}
                            <button 
                                class="open-modal-btn"
                                onclick="openScoreModal('{{ meeting.id }}', '{{ meeting.blueTeam.name }}', '{{ meeting.greenTeam.name }}')"
                            >
                                <i class="fas fa-trophy"></i>
                                {{ "Score_Entries" |trans }}
                            </button>
                        {% endif %}
                    </div>
                {% endfor %}
            {% else %}
                <div class="no-matches">
                    {{ "No_Match_To_Play" |trans }}
                </div>
            {% endif %}
        </div>
        

        <div class="pagination">
            {{ knp_pagination_render(meetings) }}
        </div>
        <div id="scoreModal" class="modal-backdrop">
            <div class="modal-container">
                <div class="modal-header">
                    <h3 class="modal-title">{{ "Score_Entries" |trans }}</h3>
                    <button type="button" class="modal-close" onclick="closeScoreModal()">&times;</button>
                </div>
                <form id="scoreForm" class="modal-form" method="POST" onsubmit="return validateScoreForm()">
                    <div class="score-group">
                        <div class="score-input-container">
                            <label class="score-input-label" id="blueTeamLabel">{{ "Blue_Team" |trans }}</label>
                            <input type="number" name="blueScore" class="score-input" min="0" required>
                        </div>
                        <span class="scores-separator">-</span>
                        <div class="score-input-container">
                            <label class="score-input-label" id="greenTeamLabel">{{ "Green_Team" |trans }}</label>
                            <input type="number" name="greenScore" class="score-input" min="0" required>
                        </div>
                    </div>
                    
                    <div class="forfeit-group">
                        <h4 class="forfeit-title">{{ "Forfeit_Declaration" |trans }}</h4>
                        <div class="forfeit-options">
                            <label class="forfeit-option">
                                <input type="radio" name="forfeit" value="none" checked>
                                <span>{{ "No_Forfeit" |trans }}</span>
                            </label>
                            <label class="forfeit-option">
                                <input type="radio" name="forfeit" value="GAVE_UP_BLUE">
                                <span id="blueForfeitLabel"></span>
                            </label>
                            <label class="forfeit-option">
                                <input type="radio" name="forfeit" value="GAVE_UP_GREEN">
                                <span id="greenForfeitLabel"></span>
                            </label>
                        </div>
                    </div>

                    <button type="submit" class="score-submit">
                        <i class="fas fa-check"></i>
                        {{ "Save_Scores" |trans }}
                    </button>
                </form>
            </div>
        </div>
    </div>
{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script>
        // État global pour stocker l'ID du match en cours
        let currentMatchId = null;

        function openScoreModal(meetingId, blueTeam, greenTeam) {
            const modal = document.getElementById('scoreModal');
            const form = document.getElementById('scoreForm');
            const blueTeamLabel = document.getElementById('blueTeamLabel');
            const greenTeamLabel = document.getElementById('greenTeamLabel');
            const blueForfeitLabel = document.getElementById('blueForfeitLabel');
            const greenForfeitLabel = document.getElementById('greenForfeitLabel');
            
            currentMatchId = meetingId;
            
            const locale = window.location.pathname.split('/')[1];
            form.action = `/${locale}/championship/meeting/${meetingId}/score`;
            
            blueTeamLabel.textContent = blueTeam;
            greenTeamLabel.textContent = greenTeam;
            blueForfeitLabel.textContent = blueTeam;
            greenForfeitLabel.textContent = greenTeam;
            
            // Reset form and radio buttons
            form.reset();
            form.querySelector('input[name="forfeit"][value="none"]').checked = true;
            
            modal.style.display = 'block';
            setTimeout(() => {
                form.querySelector('input[name="blueScore"]').focus();
            }, 300);
        }

        // Fonction pour fermer la modale
        function closeScoreModal() {
            const modal = document.getElementById('scoreModal');
            
            // Ajoute une classe pour l'animation de sortie
            modal.classList.add('modal-closing');
            
            // Attend la fin de l'animation avant de cacher la modale
            setTimeout(() => {
                modal.style.display = 'none';
                modal.classList.remove('modal-closing');
                // Supprimé: document.body.style.overflow = '';
                currentMatchId = null;
            }, 300);
        }

        function validateScoreForm() {
            const form = document.getElementById('scoreForm');
            const forfeitRadios = form.querySelector('input[name="forfeit"]:checked');
            
            // Si un forfait est sélectionné, pas besoin de valider les scores
            if (forfeitRadios && forfeitRadios.value !== 'none') {
                return true;
            }
            
            const blueScore = parseInt(form.blueScore.value);
            const greenScore = parseInt(form.greenScore.value);
            
            if (isNaN(blueScore) || isNaN(greenScore)) {
                showError("{{ 'Valid_Scores'|trans }}");
                return false;
            }
            
            if (blueScore < 0 || greenScore < 0) {
                showError("{{ 'No_negative_Scores'|trans }}");
                return false;
            }
            
            return true;
        }

        // Fonction pour afficher les erreurs
        function showError(message) {
            // Crée un élément pour afficher l'erreur
            const errorDiv = document.createElement('div');
            errorDiv.className = 'score-error';
            errorDiv.textContent = message;

            // Trouve l'endroit où insérer l'erreur
            const form = document.getElementById('scoreForm');
            const submitButton = form.querySelector('.score-submit');
            form.insertBefore(errorDiv, submitButton);

            // Supprime le message d'erreur après 3 secondes
            setTimeout(() => {
                errorDiv.remove();
            }, 3000);
        }

        // Gestionnaire d'événements pour la fermeture de la modale
        document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('scoreModal');

            // Ferme la modale lors du clic sur l'arrière-plan
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeScoreModal();
                }
            });

            // Ferme la modale avec la touche Échap
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && modal.style.display === 'block') {
                    closeScoreModal();
                }
            });

            // Gestion de la soumission du formulaire
            const form = document.getElementById('scoreForm');
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                if (!validateScoreForm()) {
                    return;
                }

                try {
                    const formData = new FormData(form);
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        // Mise à jour de l'interface
                        const matchCard = document.getElementById(`match-card-${currentMatchId}`);
                        if (matchCard) {
                            matchCard.querySelector('.match-status').className = 
                                'match-status status-finished';
                            matchCard.querySelector('.match-status').textContent = 'PLAYED';
                            
                            // Rafraîchit la page pour montrer les scores
                            window.location.reload();
                        }
                        
                        closeScoreModal();
                    } else {
                        showError("{{'Error_Saving_Scores' |trans}}");
                    }
                } catch (error) {
                    console.error("{{'Error' |trans}}:", error);
                    showError("{{'Error_Saving_Scores' |trans}}");
                }
            });
        });

        function exportMeetings() {
            const loadingDiv = createLoadingDiv('Exporting meetings...');
            document.body.appendChild(loadingDiv);

            fetch('{{ path('app_championship_export', {'id': champion_ship.id}) }}', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Export failed: ' + response.statusText);
                }
                return response.blob();
            })
            .then(blob => {
                // Créer et déclencher le téléchargement
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `championship_{{ champion_ship.id }}_meetings_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                
                // Nettoyer
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                showToast('success', 'Meetings exported successfully!');
            })
            .catch(error => {
                console.error('Export error:', error);
                showToast('error', 'Export failed: ' + error.message);
            })
            .finally(() => {
                document.body.removeChild(loadingDiv);
            });
        }

        function importChampionship(input) {
            if (!input.files || !input.files[0]) {
                showToast('error', 'Please select a file to import');
                return;
            }

            const file = input.files[0];
            
            // Vérifier le type de fichier
            if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
                showToast('error', 'Please select a JSON file');
                input.value = '';
                return;
            }

            // Vérifier la taille du fichier (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showToast('error', 'File size must be less than 5MB');
                input.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const content = e.target.result;
                    
                    // Valider la structure du JSON
                    const parsedContent = JSON.parse(content);
                    if (!parsedContent.meetings || !Array.isArray(parsedContent.meetings)) {
                        throw new Error('Invalid file structure: missing meetings array');
                    }

                    // Valider chaque meeting
                    parsedContent.meetings.forEach((meeting, index) => {
                        if (!meeting.blueTeam?.id || !meeting.greenTeam?.id) {
                            throw new Error(`Invalid meeting data at index ${index}: missing team information`);
                        }
                    });
                    
                    // Si tout est valide, uploader le fichier
                    uploadFile(file);
                    
                } catch (error) {
                    console.error('Validation error:', error);
                    showToast('error', 'Invalid JSON format: ' + error.message);
                    input.value = '';
                }
            };

            reader.onerror = function(error) {
                console.error('FileReader error:', error);
                showToast('error', 'Error reading file');
                input.value = '';
            };

            reader.readAsText(file);
        }

        function uploadFile(file) {
            const loadingDiv = createLoadingDiv('Importing meetings...');
            document.body.appendChild(loadingDiv);

            const formData = new FormData();
            formData.append('importFile', file);

            fetch('{{ path('app_championship_import') }}', {
                method: 'POST',
                body: formData,
            })
            .then(async response => {
                const contentType = response.headers.get('content-type');
                if (!response.ok) {
                    const responseText = await response.text();
                    try {
                        const errorData = JSON.parse(responseText);
                        throw new Error(errorData.error || 'Unknown error occurred');
                    } catch (e) {
                        throw new Error('Server error: ' + responseText);
                    }
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showToast('success', data.message || 'Meetings imported successfully!');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    throw new Error(data.error || 'Unknown error occurred');
                }
            })
            .catch(error => {
                console.error('Import error:', error);
                showToast('error', 'Error during import: ' + error.message);
            })
            .finally(() => {
                document.body.removeChild(loadingDiv);
                document.getElementById('importFile').value = '';
            });
        }

        // Utility functions
        function createLoadingDiv(message) {
            const div = document.createElement('div');
            div.innerHTML = `
                <div class="loading-spinner"></div>
                <div class="loading-message">${message}</div>
            `;
            div.className = 'loading-overlay';
            return div;
        }

        function showToast(type, message) {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => document.body.removeChild(toast), 300);
            }, 3000);
        }
    </script>
{% endblock %}